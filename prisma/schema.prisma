datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id              String         @id @default(cuid())
  password        String
  userName        String         @unique  
  collaborators   Collaborator[] @relation("UserToCollaborators")
  asCollaborator  Collaborator[] @relation("CollaboratorToUser")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  dishes          Dish[]         @relation("UserToDish")
  foods           Food[]         // Relation inverse avec Food
}

model Collaborator {
  id             String   @id @default(cuid())
  userId         String
  collaboratorId String
  user           User     @relation("UserToCollaborators", fields: [userId], references: [id], onDelete: Cascade)
  collaborator   User     @relation("CollaboratorToUser", fields: [collaboratorId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
}

model Food {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  aisle      String
  icon       String?
  ingredients Ingredient[]
  userId     String   // ID de l'utilisateur qui a créé cet aliment
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Dish {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  instructions String?
  chefId      String
  chef        User         @relation("UserToDish", fields: [chefId], references: [id], onDelete: Cascade)
  ingredients Ingredient[]
  tags        String[]
  images      Image[]
  weeklyDish  Boolean       @default(false) // Indique si le plat fait partie des repas de la semaine
  status      SharedStatus  @default(PUBLIC) // Enum pour déterminer si le plat est partagé
}

model Ingredient {
  id       String   @id @default(cuid())
  quantity String
  dishId   String
  foodId   String
  dish     Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)
  food     Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
}

model Image {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  filename    String
  url         String
  size        Int
  dishId      String?
  dish        Dish?    @relation(fields: [dishId], references: [id], onDelete: Cascade)
}

enum SharedStatus {
  PUBLIC
  PRIVATE
}
